// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  //  supervisor   User?    @relation('supervisor',fields: [supervisorId], references: [id]) 
  // supervisorId Int?
  sessions      Session[]
  addresses     Address[]
  accounts      Account[]
  Ticket        Ticket[]
  tasks         Task[]

  @@index([id])
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Account {
  id              String  @id @default(cuid())
  userId          String
  mentor          String
  mentorAccountId String
  picture         String?
  bio             String?
  location        String?
  refresh_token   String? @db.Text
  access_token    String? @db.Text
  expires_at      Int?
  token_type      String?
  scope           String?
  id_token        String? @db.Text
  session_state   String?
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([mentor, mentorAccountId])
}

model Address {
  id        String  @id @default(cuid())
  street    String
  city      String
  state     String
  zip       String
  country   String
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Task {
  id          Int     @id @default(autoincrement())
  desctiption String
  assignedTo  User[]
  isDone      Boolean @default(false)
  Ticket      Ticket? @relation(fields: [ticketId], references: [id])
  ticketId    Int?
}

model Ticket {
  id          Int      @id
  desctiption String
  tasks       Task[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
